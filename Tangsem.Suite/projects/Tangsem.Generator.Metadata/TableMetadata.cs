// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TableMetadata.cs" company="TangsemTechAu">
//   LiWang@TangsemTechAu
// </copyright>
// <summary>
//   The table metadata.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using Tangsem.Common.Entities;

namespace Tangsem.Generator.Metadata
{
  /// <summary>
  /// The table metadata.
  /// </summary>
  public class TableMetadata : ColumnsContainer
  {
    private static PropertyInfo[] _auditingPropertyInfos;

    static TableMetadata()
    {
      _auditingPropertyInfos = typeof(IAuditableEntity).GetProperties();
    }

    public static PropertyInfo[] AuditingPropertyInfos
    {
      get
      {
        return _auditingPropertyInfos;
      }
    }

    public TableMetadata()
    {
      this.OutgoingReferences = new List<ReferenceMetadata>();
      this.IncomingReferences = new List<ReferenceMetadata>();
      this.Keys = new List<UniqueKeyMetadata>();
    }

    /// <summary>
    /// Gets or sets the table name.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Gets or sets entity name.
    /// </summary>
    public string EntityName { get; set; }

    /// <summary>
    /// Gets a value indicating whether HasAutoGeneratedKey.
    /// </summary>
    public bool HasAutoGeneratedKey
    {
      get
      {
        return this.Columns.Any(col => col.IsAutoIncrement && col.IsPrimaryKey);
      }
    }

    public string PrimaryKeyPropertyName
    {
      get
      {
        return string.Join("And", this.PrimaryKeys.Select(pk => pk.PropertyName));
      }
    }

    /// <summary>
    /// Gets or sets a value indicating whether IsView.
    /// </summary>
    public bool IsView { get; set; }

    /// <summary>
    /// Gets PrimaryKeys.
    /// </summary>
    public IList<ColumnMetadata> PrimaryKeys
    {
      get
      {
        return this.Columns.Where(col => col.IsPrimaryKey).ToList();
      }
    }

    public List<ReferenceMetadata> OutgoingReferences { get; set; }

    public List<ReferenceMetadata> IncomingReferences { get; set; }

    public List<UniqueKeyMetadata> Keys { get; set; }

    public List<UniqueKeyMetadata> UniqueKeys
    {
      get
      {
        return this.Keys.Where(k => !k.IsPrimaryKey).ToList();
      }
    }

    public bool IsAuditableEntity
    {
      get
      {
        foreach (var p in AuditingPropertyInfos)
        {
          var flag = false;
          foreach (var c in this.Columns)
          {
            if (c.PropertyName == p.Name)
            {
              flag = true;
              break;
            }
          }

          if (!flag)
          {
            return false;
          }
        }

        return true;
      }
    }
  }
}