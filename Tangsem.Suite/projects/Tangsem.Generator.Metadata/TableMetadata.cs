// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TableMetadata.cs" company="TangsemTechAu">
//   LiWang@TangsemTechAu
// </copyright>
// <summary>
//   The table metadata.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

using Tangsem.Common.Entities;
using Tangsem.Common.Entities.Reos;

namespace Tangsem.Generator.Metadata
{
  /// <summary>
  /// The table metadata.
  /// </summary>
  public class TableMetadata : ColumnsContainer
  {
    public static readonly PropertyInfo[] AuditingPropertyInfos;
    public static readonly PropertyInfo[] ReosAuditingPropertyInfos;
    public static readonly PropertyInfo[] ReosReplicatedPropertyInfos;
    public static readonly PropertyInfo[] ReosIntegratedPropertyInfos;


    static TableMetadata()
    {
      AuditingPropertyInfos = typeof(IAuditableEntity).GetProperties();
      ReosAuditingPropertyInfos = typeof(IReosAuditableEntity).GetProperties();
      ReosReplicatedPropertyInfos = typeof(IReosReplicatedEntity).GetProperties();
      ReosIntegratedPropertyInfos = typeof(IReosIntegratedEntity).GetProperties();
    }

    public TableMetadata()
    {
      this.OutgoingReferences = new List<ReferenceMetadata>();
      this.IncomingReferences = new List<ReferenceMetadata>();
      this.Keys = new List<UniqueKeyMetadata>();
    }

    /// <summary>
    /// Gets or sets the table name.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Gets or sets entity name.
    /// </summary>
    public string EntityName { get; set; }

    /// <summary>
    /// Gets a value indicating whether HasAutoGeneratedKey.
    /// </summary>
    public bool HasAutoGeneratedKey
    {
      get
      {
        return this.Columns.Any(col => col.IsAutoIncrement && col.IsPrimaryKey);
      }
    }

    public string PrimaryKeyPropertyName
    {
      get
      {
        return string.Join("And", this.PrimaryKeys.Select(pk => pk.PropertyName));
      }
    }

    /// <summary>
    /// Gets or sets a value indicating whether IsView.
    /// </summary>
    public bool IsView { get; set; }

    /// <summary>
    /// Gets PrimaryKeys.
    /// </summary>
    public IList<ColumnMetadata> PrimaryKeys
    {
      get
      {
        return this.Columns.Where(col => col.IsPrimaryKey).ToList();
      }
    }

    public List<ReferenceMetadata> OutgoingReferences { get; set; }

    public List<ReferenceMetadata> IncomingReferences { get; set; }

    public List<UniqueKeyMetadata> Keys { get; set; }

    public List<UniqueKeyMetadata> UniqueKeys
    {
      get
      {
        return this.Keys.Where(k => !k.IsPrimaryKey).ToList();
      }
    }

    public bool IsAuditableEntity
    {
      get
      {
        return AuditingPropertyInfos.All(p => this.Columns.Any(c => c.PropertyName == p.Name));
      }
    }

    public bool IsReosAuditableEntity
    {
      get
      {
        var val = ReosAuditingPropertyInfos.All(p => this.Columns.Any(c => c.PropertyName == p.Name));
        return val;
      }
    }

    public bool IsReosReplicatedEntity
    {
      get
      {
        var val = ReosReplicatedPropertyInfos.All(p => this.Columns.Any(c => c.PropertyName == p.Name));
        return val;
      }
    }

    public bool IsReosIntegratedEntity
    {
      get
      {
        var val = ReosIntegratedPropertyInfos.All(p => this.Columns.Any(c => c.PropertyName == p.Name));
        return val;
      }
    }

    public string PocoExtensionsForReos
    {
      get
      {
        var lst = new List<string>();

        if (this.IsReosAuditableEntity)
        {
          lst.Add(typeof(IReosAuditableEntity).Name);
        }

        if (this.IsReosReplicatedEntity)
        {
          lst.Add(typeof(IReosReplicatedEntity).Name);
        }

        if (this.IsReosIntegratedEntity)
        {
          lst.Add(typeof(IReosIntegratedEntity).Name);
        }

        if (lst.Any())
        {
          return " : " + string.Join(", ", lst);  
        }

        return string.Empty;
      }
    }
    
  }
}