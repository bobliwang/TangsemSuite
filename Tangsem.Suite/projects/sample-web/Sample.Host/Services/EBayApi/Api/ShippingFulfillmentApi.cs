/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShippingFulfillmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>Object</returns>
        Object CreateShippingFulfillment (string orderId, ShippingFulfillmentDetails body);

        /// <summary>
        /// Create a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateShippingFulfillmentWithHttpInfo (string orderId, ShippingFulfillmentDetails body);
        /// <summary>
        /// Get a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ShippingFulfillment</returns>
        ShippingFulfillment GetShippingFulfillment (string fulfillmentId, string orderId);

        /// <summary>
        /// Get a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ApiResponse of ShippingFulfillment</returns>
        ApiResponse<ShippingFulfillment> GetShippingFulfillmentWithHttpInfo (string fulfillmentId, string orderId);
        /// <summary>
        /// Get Shipping Fulfillments
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ShippingFulfillmentPagedCollection</returns>
        ShippingFulfillmentPagedCollection GetShippingFulfillments (string orderId);

        /// <summary>
        /// Get Shipping Fulfillments
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ApiResponse of ShippingFulfillmentPagedCollection</returns>
        ApiResponse<ShippingFulfillmentPagedCollection> GetShippingFulfillmentsWithHttpInfo (string orderId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateShippingFulfillmentAsync (string orderId, ShippingFulfillmentDetails body);

        /// <summary>
        /// Create a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateShippingFulfillmentAsyncWithHttpInfo (string orderId, ShippingFulfillmentDetails body);
        /// <summary>
        /// Get a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ShippingFulfillment</returns>
        System.Threading.Tasks.Task<ShippingFulfillment> GetShippingFulfillmentAsync (string fulfillmentId, string orderId);

        /// <summary>
        /// Get a Shipping Fulfillment
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ApiResponse (ShippingFulfillment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingFulfillment>> GetShippingFulfillmentAsyncWithHttpInfo (string fulfillmentId, string orderId);
        /// <summary>
        /// Get Shipping Fulfillments
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ShippingFulfillmentPagedCollection</returns>
        System.Threading.Tasks.Task<ShippingFulfillmentPagedCollection> GetShippingFulfillmentsAsync (string orderId);

        /// <summary>
        /// Get Shipping Fulfillments
        /// </summary>
        /// <remarks>
        /// Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ApiResponse (ShippingFulfillmentPagedCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingFulfillmentPagedCollection>> GetShippingFulfillmentsAsyncWithHttpInfo (string orderId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShippingFulfillmentApi : IShippingFulfillmentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingFulfillmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShippingFulfillmentApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

      this.ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingFulfillmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShippingFulfillmentApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

      this.ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a Shipping Fulfillment When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>Object</returns>
        public Object CreateShippingFulfillment (string orderId, ShippingFulfillmentDetails body)
        {
             ApiResponse<Object> localVarResponse = this.CreateShippingFulfillmentWithHttpInfo(orderId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Shipping Fulfillment When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateShippingFulfillmentWithHttpInfo (string orderId, ShippingFulfillmentDetails body)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ShippingFulfillmentApi->CreateShippingFulfillment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingFulfillmentApi->CreateShippingFulfillment");

            var localVarPath = "/order/{orderId}/shipping_fulfillment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization Code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateShippingFulfillment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a Shipping Fulfillment When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateShippingFulfillmentAsync (string orderId, ShippingFulfillmentDetails body)
        {
             ApiResponse<Object> localVarResponse = await this.CreateShippingFulfillmentAsyncWithHttpInfo(orderId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Shipping Fulfillment When you group an order&#39;s line items into one or more packages, each package requires a corresponding plan for handling, addressing, and shipping; this is a shipping fulfillment. For each package, execute this call once to generate a shipping fulfillment associated with that package. Note: A single line item in an order can consist of multiple units of a purchased item, and one unit can consist of multiple parts or components. Although these components might be provided by the manufacturer in separate packaging, the seller must include all components of a given line item in the same package. Before using this call for a given package, you must determine which line items are in the package. If the package has been shipped, you should provide the date of shipment in the request. If not provided, it will default to the current date and time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <param name="body">fulfillment payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateShippingFulfillmentAsyncWithHttpInfo (string orderId, ShippingFulfillmentDetails body)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ShippingFulfillmentApi->CreateShippingFulfillment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ShippingFulfillmentApi->CreateShippingFulfillment");

            var localVarPath = "/order/{orderId}/shipping_fulfillment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization Code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateShippingFulfillment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a Shipping Fulfillment Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ShippingFulfillment</returns>
        public ShippingFulfillment GetShippingFulfillment (string fulfillmentId, string orderId)
        {
             ApiResponse<ShippingFulfillment> localVarResponse = this.GetShippingFulfillmentWithHttpInfo(fulfillmentId, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Shipping Fulfillment Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ApiResponse of ShippingFulfillment</returns>
        public ApiResponse< ShippingFulfillment > GetShippingFulfillmentWithHttpInfo (string fulfillmentId, string orderId)
        {
            // verify the required parameter 'fulfillmentId' is set
            if (fulfillmentId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentId' when calling ShippingFulfillmentApi->GetShippingFulfillment");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ShippingFulfillmentApi->GetShippingFulfillment");

            var localVarPath = "/order/{orderId}/shipping_fulfillment/{fulfillmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentId != null) localVarPathParams.Add("fulfillmentId", this.Configuration.ApiClient.ParameterToString(fulfillmentId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (Authorization Code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetShippingFulfillment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingFulfillment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShippingFulfillment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingFulfillment)));
        }

        /// <summary>
        /// Get a Shipping Fulfillment Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ShippingFulfillment</returns>
        public async System.Threading.Tasks.Task<ShippingFulfillment> GetShippingFulfillmentAsync (string fulfillmentId, string orderId)
        {
             ApiResponse<ShippingFulfillment> localVarResponse = await this.GetShippingFulfillmentAsyncWithHttpInfo(fulfillmentId, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Shipping Fulfillment Use this call to retrieve the contents of a fulfillment based on its unique identifier, fulfillmentId (combined with the associated order&#39;s orderId). The fulfillmentId value was originally generated by the createShippingFulfillment call, and is returned by the getShippingFulfillments call in the members.fulfillmentId field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fulfillmentId">The unique identifier of the fulfillment. This eBay-generated value was created by the Create Shipping Fulfillment call, and returned by the getShippingFulfillments call in the fulfillments.fulfillmentId field; for example, 9405509699937003457459.</param>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ApiResponse (ShippingFulfillment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShippingFulfillment>> GetShippingFulfillmentAsyncWithHttpInfo (string fulfillmentId, string orderId)
        {
            // verify the required parameter 'fulfillmentId' is set
            if (fulfillmentId == null)
                throw new ApiException(400, "Missing required parameter 'fulfillmentId' when calling ShippingFulfillmentApi->GetShippingFulfillment");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ShippingFulfillmentApi->GetShippingFulfillment");

            var localVarPath = "/order/{orderId}/shipping_fulfillment/{fulfillmentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fulfillmentId != null) localVarPathParams.Add("fulfillmentId", this.Configuration.ApiClient.ParameterToString(fulfillmentId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (Authorization Code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetShippingFulfillment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingFulfillment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShippingFulfillment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingFulfillment)));
        }

        /// <summary>
        /// Get Shipping Fulfillments Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ShippingFulfillmentPagedCollection</returns>
        public ShippingFulfillmentPagedCollection GetShippingFulfillments (string orderId)
        {
             ApiResponse<ShippingFulfillmentPagedCollection> localVarResponse = this.GetShippingFulfillmentsWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipping Fulfillments Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>ApiResponse of ShippingFulfillmentPagedCollection</returns>
        public ApiResponse< ShippingFulfillmentPagedCollection > GetShippingFulfillmentsWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ShippingFulfillmentApi->GetShippingFulfillments");

            var localVarPath = "/order/{orderId}/shipping_fulfillment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (Authorization Code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetShippingFulfillments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingFulfillmentPagedCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShippingFulfillmentPagedCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingFulfillmentPagedCollection)));
        }

        /// <summary>
        /// Get Shipping Fulfillments Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ShippingFulfillmentPagedCollection</returns>
        public async System.Threading.Tasks.Task<ShippingFulfillmentPagedCollection> GetShippingFulfillmentsAsync (string orderId)
        {
             ApiResponse<ShippingFulfillmentPagedCollection> localVarResponse = await this.GetShippingFulfillmentsAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Shipping Fulfillments Use this call to retrieve the contents of all fulfillments currently defined for a specified order based on the order&#39;s unique identifier, orderId. This value is returned in the getOrders call&#39;s members.orderId field when you search for orders by creation date or shipment status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">The unique identifier of the order. This value was returned by the getOrders call in the orders.orderId field; for example, 170009092860-9849164007!140000000544476.</param>
        /// <returns>Task of ApiResponse (ShippingFulfillmentPagedCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShippingFulfillmentPagedCollection>> GetShippingFulfillmentsAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ShippingFulfillmentApi->GetShippingFulfillments");

            var localVarPath = "/order/{orderId}/shipping_fulfillment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (Authorization Code) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetShippingFulfillments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingFulfillmentPagedCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShippingFulfillmentPagedCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingFulfillmentPagedCollection)));
        }

    }
}
