/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// This type contains information about a digital gift card line item that was purchased as a gift, and sent to the recipient by email.
    /// </summary>
    [DataContract]
    public partial class GiftDetails :  IEquatable<GiftDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GiftDetails" /> class.
        /// </summary>
        /// <param name="message">This field contains the gift message from the buyer to the gift recipient. This field is only returned if the buyer of the gift included a message for the gift..</param>
        /// <param name="recipientEmail">The email address of the gift recipient. The seller will send the digital gift card to this email address..</param>
        /// <param name="senderName">The name of the buyer, which will appear on the email that is sent to the gift recipient..</param>
        public GiftDetails(string message = default(string), string recipientEmail = default(string), string senderName = default(string))
        {
            this.Message = message;
            this.RecipientEmail = recipientEmail;
            this.SenderName = senderName;
        }
        
        /// <summary>
        /// This field contains the gift message from the buyer to the gift recipient. This field is only returned if the buyer of the gift included a message for the gift.
        /// </summary>
        /// <value>This field contains the gift message from the buyer to the gift recipient. This field is only returned if the buyer of the gift included a message for the gift.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The email address of the gift recipient. The seller will send the digital gift card to this email address.
        /// </summary>
        /// <value>The email address of the gift recipient. The seller will send the digital gift card to this email address.</value>
        [DataMember(Name="recipientEmail", EmitDefaultValue=false)]
        public string RecipientEmail { get; set; }

        /// <summary>
        /// The name of the buyer, which will appear on the email that is sent to the gift recipient.
        /// </summary>
        /// <value>The name of the buyer, which will appear on the email that is sent to the gift recipient.</value>
        [DataMember(Name="senderName", EmitDefaultValue=false)]
        public string SenderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GiftDetails {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GiftDetails);
        }

        /// <summary>
        /// Returns true if GiftDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of GiftDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GiftDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.RecipientEmail == input.RecipientEmail ||
                    (this.RecipientEmail != null &&
                    this.RecipientEmail.Equals(input.RecipientEmail))
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.RecipientEmail != null)
                    hashCode = hashCode * 59 + this.RecipientEmail.GetHashCode();
                if (this.SenderName != null)
                    hashCode = hashCode * 59 + this.SenderName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
