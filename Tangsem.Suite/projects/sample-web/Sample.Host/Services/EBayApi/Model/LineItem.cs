/* 
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.8.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// This type contains the details of a line item in an order. A line item consists of one or more units of a specific variation and version of a listed item that has been purchased.
    /// </summary>
    [DataContract]
    public partial class LineItem :  IEquatable<LineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="appliedPromotions">This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item..</param>
        /// <param name="deliveryCost">deliveryCost.</param>
        /// <param name="discountedLineItemCost">discountedLineItemCost.</param>
        /// <param name="ebayCollectAndRemitTaxes">This container will be returned if the order line item is subject to a tax that eBay will collect and remit to the proper taxing authority on the buyer&#39;s behalf. The amount of this tax is shown in the amount field, and the type of tax is shown in the taxType field. eBay will display the tax type and amount during checkout in accordance with the buyer&#39;s address, and handle collection and remittance of the tax without requiring the seller to take any action..</param>
        /// <param name="giftDetails">giftDetails.</param>
        /// <param name="legacyItemId">The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the listingId instead..</param>
        /// <param name="legacyVariationId">The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing..</param>
        /// <param name="lineItemCost">lineItemCost.</param>
        /// <param name="lineItemFulfillmentInstructions">lineItemFulfillmentInstructions.</param>
        /// <param name="lineItemFulfillmentStatus">This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/LineItemFulfillmentStatusEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="lineItemId">This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller, and its value is based upon the concatenation of item ID/listing ID and the transaction ID, with a hyphen in between these two identifiers. Note: A single line item can consist of multiple units of a purchased item..</param>
        /// <param name="listingMarketplaceId">The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="properties">properties.</param>
        /// <param name="purchaseMarketplaceId">The unique identifier of the eBay marketplace where the line item was listed. Often, the listingMarketplaceId and the purchaseMarketplaceId identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="quantity">The number of units of the line item in the order. These are represented as a group by a single lineItemId..</param>
        /// <param name="refunds">This array is only returned if the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund..</param>
        /// <param name="sku">Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller&#39;s eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model..</param>
        /// <param name="soldFormat">The eBay listing type of the line item. The most common listing types are AUCTION and FIXED_PRICE. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/SoldFormatEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;.</param>
        /// <param name="taxes">Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item..</param>
        /// <param name="title">The title of the listing..</param>
        /// <param name="total">total.</param>
        public LineItem(List<AppliedPromotion> appliedPromotions = default(List<AppliedPromotion>), DeliveryCost deliveryCost = default(DeliveryCost), Amount discountedLineItemCost = default(Amount), List<EbayCollectAndRemitTax> ebayCollectAndRemitTaxes = default(List<EbayCollectAndRemitTax>), GiftDetails giftDetails = default(GiftDetails), string legacyItemId = default(string), string legacyVariationId = default(string), Amount lineItemCost = default(Amount), LineItemFulfillmentInstructions lineItemFulfillmentInstructions = default(LineItemFulfillmentInstructions), string lineItemFulfillmentStatus = default(string), string lineItemId = default(string), string listingMarketplaceId = default(string), LineItemProperties properties = default(LineItemProperties), string purchaseMarketplaceId = default(string), int? quantity = default(int?), List<LineItemRefund> refunds = default(List<LineItemRefund>), string sku = default(string), string soldFormat = default(string), List<Tax> taxes = default(List<Tax>), string title = default(string), Amount total = default(Amount))
        {
            this.AppliedPromotions = appliedPromotions;
            this.DeliveryCost = deliveryCost;
            this.DiscountedLineItemCost = discountedLineItemCost;
            this.EbayCollectAndRemitTaxes = ebayCollectAndRemitTaxes;
            this.GiftDetails = giftDetails;
            this.LegacyItemId = legacyItemId;
            this.LegacyVariationId = legacyVariationId;
            this.LineItemCost = lineItemCost;
            this.LineItemFulfillmentInstructions = lineItemFulfillmentInstructions;
            this.LineItemFulfillmentStatus = lineItemFulfillmentStatus;
            this.LineItemId = lineItemId;
            this.ListingMarketplaceId = listingMarketplaceId;
            this.Properties = properties;
            this.PurchaseMarketplaceId = purchaseMarketplaceId;
            this.Quantity = quantity;
            this.Refunds = refunds;
            this.Sku = sku;
            this.SoldFormat = soldFormat;
            this.Taxes = taxes;
            this.Title = title;
            this.Total = total;
        }
        
        /// <summary>
        /// This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item.
        /// </summary>
        /// <value>This array contains information about one or more sales promotions or discounts applied to the line item. It is always returned, but will be returned as an empty array if no special sales promotions or discounts apply to the order line item.</value>
        [DataMember(Name="appliedPromotions", EmitDefaultValue=false)]
        public List<AppliedPromotion> AppliedPromotions { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryCost
        /// </summary>
        [DataMember(Name="deliveryCost", EmitDefaultValue=false)]
        public DeliveryCost DeliveryCost { get; set; }

        /// <summary>
        /// Gets or Sets DiscountedLineItemCost
        /// </summary>
        [DataMember(Name="discountedLineItemCost", EmitDefaultValue=false)]
        public Amount DiscountedLineItemCost { get; set; }

        /// <summary>
        /// This container will be returned if the order line item is subject to a tax that eBay will collect and remit to the proper taxing authority on the buyer&#39;s behalf. The amount of this tax is shown in the amount field, and the type of tax is shown in the taxType field. eBay will display the tax type and amount during checkout in accordance with the buyer&#39;s address, and handle collection and remittance of the tax without requiring the seller to take any action.
        /// </summary>
        /// <value>This container will be returned if the order line item is subject to a tax that eBay will collect and remit to the proper taxing authority on the buyer&#39;s behalf. The amount of this tax is shown in the amount field, and the type of tax is shown in the taxType field. eBay will display the tax type and amount during checkout in accordance with the buyer&#39;s address, and handle collection and remittance of the tax without requiring the seller to take any action.</value>
        [DataMember(Name="ebayCollectAndRemitTaxes", EmitDefaultValue=false)]
        public List<EbayCollectAndRemitTax> EbayCollectAndRemitTaxes { get; set; }

        /// <summary>
        /// Gets or Sets GiftDetails
        /// </summary>
        [DataMember(Name="giftDetails", EmitDefaultValue=false)]
        public GiftDetails GiftDetails { get; set; }

        /// <summary>
        /// The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the listingId instead.
        /// </summary>
        /// <value>The eBay-generated legacy listing item ID of the listing. Note that the unique identifier of a listing in REST-based APIs is called the listingId instead.</value>
        [DataMember(Name="legacyItemId", EmitDefaultValue=false)]
        public string LegacyItemId { get; set; }

        /// <summary>
        /// The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing.
        /// </summary>
        /// <value>The unique identifier of a single variation within a multiple-variation listing. This field is only returned if the line item purchased was from a multiple-variation listing.</value>
        [DataMember(Name="legacyVariationId", EmitDefaultValue=false)]
        public string LegacyVariationId { get; set; }

        /// <summary>
        /// Gets or Sets LineItemCost
        /// </summary>
        [DataMember(Name="lineItemCost", EmitDefaultValue=false)]
        public Amount LineItemCost { get; set; }

        /// <summary>
        /// Gets or Sets LineItemFulfillmentInstructions
        /// </summary>
        [DataMember(Name="lineItemFulfillmentInstructions", EmitDefaultValue=false)]
        public LineItemFulfillmentInstructions LineItemFulfillmentInstructions { get; set; }

        /// <summary>
        /// This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/LineItemFulfillmentStatusEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>This enumeration value indicates the current fulfillment status of the line item. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/LineItemFulfillmentStatusEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="lineItemFulfillmentStatus", EmitDefaultValue=false)]
        public string LineItemFulfillmentStatus { get; set; }

        /// <summary>
        /// This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller, and its value is based upon the concatenation of item ID/listing ID and the transaction ID, with a hyphen in between these two identifiers. Note: A single line item can consist of multiple units of a purchased item.
        /// </summary>
        /// <value>This is the unique identifier of an eBay order line item. This field is created as soon as there is a commitment to buy from the seller, and its value is based upon the concatenation of item ID/listing ID and the transaction ID, with a hyphen in between these two identifiers. Note: A single line item can consist of multiple units of a purchased item.</value>
        [DataMember(Name="lineItemId", EmitDefaultValue=false)]
        public string LineItemId { get; set; }

        /// <summary>
        /// The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The unique identifier of the eBay marketplace where the line item was listed. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="listingMarketplaceId", EmitDefaultValue=false)]
        public string ListingMarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public LineItemProperties Properties { get; set; }

        /// <summary>
        /// The unique identifier of the eBay marketplace where the line item was listed. Often, the listingMarketplaceId and the purchaseMarketplaceId identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The unique identifier of the eBay marketplace where the line item was listed. Often, the listingMarketplaceId and the purchaseMarketplaceId identifier are the same, but there are occasions when an item will surface on multiple eBay marketplaces. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/MarketplaceIdEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="purchaseMarketplaceId", EmitDefaultValue=false)]
        public string PurchaseMarketplaceId { get; set; }

        /// <summary>
        /// The number of units of the line item in the order. These are represented as a group by a single lineItemId.
        /// </summary>
        /// <value>The number of units of the line item in the order. These are represented as a group by a single lineItemId.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// This array is only returned if the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.
        /// </summary>
        /// <value>This array is only returned if the seller has submitted a partial or full refund to the buyer for the order. If a refund has occurred, the refund amount and refund date will be shown for each refund.</value>
        [DataMember(Name="refunds", EmitDefaultValue=false)]
        public List<LineItemRefund> Refunds { get; set; }

        /// <summary>
        /// Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller&#39;s eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model.
        /// </summary>
        /// <value>Seller-defined Stock-Keeping Unit (SKU). This inventory identifier must be unique within the seller&#39;s eBay inventory. SKUs are optional when listing in the legacy/Trading API system, but SKUs are required when listing items through the Inventory API model.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }

        /// <summary>
        /// The eBay listing type of the line item. The most common listing types are AUCTION and FIXED_PRICE. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/SoldFormatEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The eBay listing type of the line item. The most common listing types are AUCTION and FIXED_PRICE. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/devzone/rest/api-ref/fulfillment/types/SoldFormatEnum.html&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="soldFormat", EmitDefaultValue=false)]
        public string SoldFormat { get; set; }

        /// <summary>
        /// Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item.
        /// </summary>
        /// <value>Contains a list of taxes applied to the line item, if any. This array is always returned, but will be returned as empty if no taxes are applicable to the line item.</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<Tax> Taxes { get; set; }

        /// <summary>
        /// The title of the listing.
        /// </summary>
        /// <value>The title of the listing.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public Amount Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  AppliedPromotions: ").Append(AppliedPromotions).Append("\n");
            sb.Append("  DeliveryCost: ").Append(DeliveryCost).Append("\n");
            sb.Append("  DiscountedLineItemCost: ").Append(DiscountedLineItemCost).Append("\n");
            sb.Append("  EbayCollectAndRemitTaxes: ").Append(EbayCollectAndRemitTaxes).Append("\n");
            sb.Append("  GiftDetails: ").Append(GiftDetails).Append("\n");
            sb.Append("  LegacyItemId: ").Append(LegacyItemId).Append("\n");
            sb.Append("  LegacyVariationId: ").Append(LegacyVariationId).Append("\n");
            sb.Append("  LineItemCost: ").Append(LineItemCost).Append("\n");
            sb.Append("  LineItemFulfillmentInstructions: ").Append(LineItemFulfillmentInstructions).Append("\n");
            sb.Append("  LineItemFulfillmentStatus: ").Append(LineItemFulfillmentStatus).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  ListingMarketplaceId: ").Append(ListingMarketplaceId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PurchaseMarketplaceId: ").Append(PurchaseMarketplaceId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  SoldFormat: ").Append(SoldFormat).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineItem);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppliedPromotions == input.AppliedPromotions ||
                    this.AppliedPromotions != null &&
                    this.AppliedPromotions.SequenceEqual(input.AppliedPromotions)
                ) && 
                (
                    this.DeliveryCost == input.DeliveryCost ||
                    (this.DeliveryCost != null &&
                    this.DeliveryCost.Equals(input.DeliveryCost))
                ) && 
                (
                    this.DiscountedLineItemCost == input.DiscountedLineItemCost ||
                    (this.DiscountedLineItemCost != null &&
                    this.DiscountedLineItemCost.Equals(input.DiscountedLineItemCost))
                ) && 
                (
                    this.EbayCollectAndRemitTaxes == input.EbayCollectAndRemitTaxes ||
                    this.EbayCollectAndRemitTaxes != null &&
                    this.EbayCollectAndRemitTaxes.SequenceEqual(input.EbayCollectAndRemitTaxes)
                ) && 
                (
                    this.GiftDetails == input.GiftDetails ||
                    (this.GiftDetails != null &&
                    this.GiftDetails.Equals(input.GiftDetails))
                ) && 
                (
                    this.LegacyItemId == input.LegacyItemId ||
                    (this.LegacyItemId != null &&
                    this.LegacyItemId.Equals(input.LegacyItemId))
                ) && 
                (
                    this.LegacyVariationId == input.LegacyVariationId ||
                    (this.LegacyVariationId != null &&
                    this.LegacyVariationId.Equals(input.LegacyVariationId))
                ) && 
                (
                    this.LineItemCost == input.LineItemCost ||
                    (this.LineItemCost != null &&
                    this.LineItemCost.Equals(input.LineItemCost))
                ) && 
                (
                    this.LineItemFulfillmentInstructions == input.LineItemFulfillmentInstructions ||
                    (this.LineItemFulfillmentInstructions != null &&
                    this.LineItemFulfillmentInstructions.Equals(input.LineItemFulfillmentInstructions))
                ) && 
                (
                    this.LineItemFulfillmentStatus == input.LineItemFulfillmentStatus ||
                    (this.LineItemFulfillmentStatus != null &&
                    this.LineItemFulfillmentStatus.Equals(input.LineItemFulfillmentStatus))
                ) && 
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) && 
                (
                    this.ListingMarketplaceId == input.ListingMarketplaceId ||
                    (this.ListingMarketplaceId != null &&
                    this.ListingMarketplaceId.Equals(input.ListingMarketplaceId))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                ) && 
                (
                    this.PurchaseMarketplaceId == input.PurchaseMarketplaceId ||
                    (this.PurchaseMarketplaceId != null &&
                    this.PurchaseMarketplaceId.Equals(input.PurchaseMarketplaceId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Refunds == input.Refunds ||
                    this.Refunds != null &&
                    this.Refunds.SequenceEqual(input.Refunds)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.SoldFormat == input.SoldFormat ||
                    (this.SoldFormat != null &&
                    this.SoldFormat.Equals(input.SoldFormat))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppliedPromotions != null)
                    hashCode = hashCode * 59 + this.AppliedPromotions.GetHashCode();
                if (this.DeliveryCost != null)
                    hashCode = hashCode * 59 + this.DeliveryCost.GetHashCode();
                if (this.DiscountedLineItemCost != null)
                    hashCode = hashCode * 59 + this.DiscountedLineItemCost.GetHashCode();
                if (this.EbayCollectAndRemitTaxes != null)
                    hashCode = hashCode * 59 + this.EbayCollectAndRemitTaxes.GetHashCode();
                if (this.GiftDetails != null)
                    hashCode = hashCode * 59 + this.GiftDetails.GetHashCode();
                if (this.LegacyItemId != null)
                    hashCode = hashCode * 59 + this.LegacyItemId.GetHashCode();
                if (this.LegacyVariationId != null)
                    hashCode = hashCode * 59 + this.LegacyVariationId.GetHashCode();
                if (this.LineItemCost != null)
                    hashCode = hashCode * 59 + this.LineItemCost.GetHashCode();
                if (this.LineItemFulfillmentInstructions != null)
                    hashCode = hashCode * 59 + this.LineItemFulfillmentInstructions.GetHashCode();
                if (this.LineItemFulfillmentStatus != null)
                    hashCode = hashCode * 59 + this.LineItemFulfillmentStatus.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.ListingMarketplaceId != null)
                    hashCode = hashCode * 59 + this.ListingMarketplaceId.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.PurchaseMarketplaceId != null)
                    hashCode = hashCode * 59 + this.PurchaseMarketplaceId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Refunds != null)
                    hashCode = hashCode * 59 + this.Refunds.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.SoldFormat != null)
                    hashCode = hashCode * 59 + this.SoldFormat.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
