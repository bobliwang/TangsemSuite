<#@ template language="C#" inherits="Tangsem.Common.T4.T4TemplateBase"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Tangsem.Generator" #>
<#@ import namespace="Tangsem.Generator.Settings" #>
<#@ import namespace="Tangsem.Common.DataAccess" #>

<#
  var genConfig = this.EnumsGenConfiguration;



#>
// --------------------------------------------------------------------------------------------------------------------
// <summary>
//   Defines the enums generated by T4.
// </summary>
// --------------------------------------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

namespace DocuFlow.Core.Domain
{
<#
  using(var conn = new SqlConnection(genConfig.ConnectionString))
  {
    conn.Open(); 
    var db = new Database(conn);
    
    // loop, code generation for each enum config.
    foreach(var cfg in genConfig.EnumConfigs)
    {
      var dataTable = cfg.TempDataTable = db.ExecuteDataTable(cfg.GetSql(), cfg.GetParameters());
#>
  public enum <#= cfg.EnumClassName #> {
<#
      var rows = dataTable.Rows.Cast<DataRow>().Where(x => cfg.ParentMatchFlag(x));  
      foreach(var row in rows ) { #>
    <#= cfg.GetEnumName(row)#> = <#= cfg.IsFlags ? cfg.GetFlagLiteral(row): row[cfg.ValueField] #>,

<# } /* end of foreach rows */ #>
   
  }

  <# if (cfg.IsFlags) { #>

  // Gen flags <#= cfg.EnumClassName #>
  public enum <#= cfg.EnumClassName #>Index {
  
  <#
      foreach(var row in rows) { #>

    <#= cfg.GetEnumName(row)#> = <#= row[cfg.ValueField] #>,

<# } /* end of foreach rows */ #>

  }

  <# } /* end of cfg.GenFlags */ #>

<#
    }    
  }
#>
}
