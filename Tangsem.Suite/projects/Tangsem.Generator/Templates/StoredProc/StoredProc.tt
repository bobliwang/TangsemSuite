<#@ template language="C#" inherits="Tangsem.Common.T4.T4TemplateBase"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


<#@ template debug="false" hostspecific="false" language="C#" #>



<#@ assembly name="System" #> 
<#@ assembly name="System.Data" #> 
<#@ assembly name="System.Core" #> 
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="Microsoft.CSharp" #>


<#@ import namespace="System" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #> 
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Tangsem.Generator.Settings" #>


using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using <#= Configuration.RepositoryNamespace #>;
using Tangsem.NHibernate.StoredProc;
using NHibernate;

namespace <#= Configuration.RepositoryNamespace #>.<#= Configuration.OrmType.AsNamespacePart() #>
{
  public static class StoredProcedureExtensions
  {
<#
  var dbConnecitonString = this.Configuration.ConnectionString;

  var dt = getDataTable(dbConnecitonString);
  
  var groups = dt.Rows.Cast<DataRow>().GroupBy(x => x["ProcedureName"] as string);

  foreach(var gp in groups){#>

    // --------- <#=gp.Key#> ------------
    public static <#= gp.Key#> <#= gp.Key#>(this <#= Configuration.RepositoryName  #> repository<# if(HasInputParams(gp)){#>, <#= getInputParamNames(gp)#> <#}#> )
    {
      var sp = new <#= gp.Key#>(repository.CurrentSession);

<# if (HasParams(gp)){
    foreach(var row in gp){#>
      sp.AddParameter(@"<#= getDbParamName(row)#>",  <#= !true.Equals(row["IsOutPutParameter"]) ? getParamName(row) : "null" #>, <#= getNhNullableType(row)#>, <#= true.Equals(row["IsOutPutParameter"]) ? "ParameterDirection.Output" : "ParameterDirection.Input" #>);
<# }

} #>

      return sp;
    }
<#
  }
#>



  }


<#  foreach(var gp in groups){#>
  public class <#= gp.Key#> : NhSpExecutor
  {

    public <#= gp.Key#>(ISession session) : base(session, "<#= gp.Key#>")
    { 
    }

    protected override void PostExecute(IDbCommand cmd)
    {
      base.PostExecute(cmd);

      <# foreach(var row in gp.Where(x => true.Equals(x["IsOutPutParameter"]))){ #>

      this.<#= getDbParamName(row) #> = _params.First(x => x.Name == "<#= getDbParamName(row)#>").Value as <#= getCsharpType(row) #>;
      <# } #>

    }
    
    <# foreach(var row in gp.Where(x => true.Equals(x["IsOutPutParameter"]))){ #>

    public <#= getCsharpType(row) #> <#= getDbParamName(row) #> { get; private set; }

    <# } #>


  }

<#
  }
#>


}

<#
  var str = this.GenerationEnvironment.ToString().Trim();
  this.GenerationEnvironment.Clear();
#>

<#=str#>

<#+
  

#>
