// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Tangsem.Generator.Templates.StoredProc
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.IO;
    using System.Xml;
    using System.Xml.Linq;
    using Tangsem.Generator.Settings;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class StoredProc : StoredProcBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\n");
            this.Write("\r\n\r\n\r\n");
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write("\r\n\r\n");
            this.Write(" \r\n");
            this.Write("  \r\n");
            this.Write(" \r\n");
            this.Write("\r\n\r\nusing System;\r\nusing System.Data;\r\nusing System.Collections.Generic;\r\nusing S" +
                    "ystem.Linq;\r\nusing ");
            
            #line 36 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.RepositoryNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\nusing Tangsem.NHibernate.StoredProc;\r\nusing NHibernate;\r\n\r\nnamespace ");
            
            #line 40 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.RepositoryNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 40 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.OrmType.AsNamespacePart()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  public static class StoredProcedureExtensions\r\n  {\r\n");
            
            #line 44 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"

  var dbConnecitonString = this.Configuration.ConnectionString;

  var dt = getDataTable(dbConnecitonString);
  
  var groups = dt.Rows.Cast<DataRow>().GroupBy(x => x["ProcedureName"] as string);

  foreach(var gp in groups){
            
            #line default
            #line hidden
            this.Write("\r\n    // --------- ");
            
            #line 53 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write(" ------------\r\n    public static ");
            
            #line 54 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 54 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write("(this ");
            
            #line 54 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Configuration.RepositoryName));
            
            #line default
            #line hidden
            this.Write(" repository");
            
            #line 54 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 if(HasInputParams(gp)){
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 54 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getInputParamNames(gp)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 54 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
}
            
            #line default
            #line hidden
            this.Write(" )\r\n    {\r\n      var sp = new ");
            
            #line 56 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write("(repository.CurrentSession);\r\n\r\n");
            
            #line 58 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 if (HasParams(gp)){
    foreach(var row in gp){
            
            #line default
            #line hidden
            this.Write("      sp.AddParameter(@\"");
            
            #line 60 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getDbParamName(row)));
            
            #line default
            #line hidden
            this.Write("\",  ");
            
            #line 60 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!true.Equals(row["IsOutPutParameter"]) ? getParamName(row) : "null"));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 60 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getNhNullableType(row)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 60 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(true.Equals(row["IsOutPutParameter"]) ? "ParameterDirection.Output" : "ParameterDirection.Input"));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 61 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 }

} 
            
            #line default
            #line hidden
            this.Write("\r\n      return sp;\r\n    }\r\n");
            
            #line 67 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"

  }

            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n  }\r\n\r\n\r\n");
            
            #line 76 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
  foreach(var gp in groups){
            
            #line default
            #line hidden
            this.Write("  public class ");
            
            #line 77 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write(" : NhSpExecutor\r\n  {\r\n\r\n    public ");
            
            #line 80 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write("(ISession session) : base(session, \"");
            
            #line 80 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gp.Key));
            
            #line default
            #line hidden
            this.Write("\")\r\n    { \r\n    }\r\n\r\n    protected override void PostExecute(IDbCommand cmd)\r\n   " +
                    " {\r\n      base.PostExecute(cmd);\r\n\r\n      ");
            
            #line 88 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 foreach(var row in gp.Where(x => true.Equals(x["IsOutPutParameter"]))){ 
            
            #line default
            #line hidden
            this.Write("\r\n      this.");
            
            #line 90 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getDbParamName(row)));
            
            #line default
            #line hidden
            this.Write(" = _params.First(x => x.Name == \"");
            
            #line 90 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getDbParamName(row)));
            
            #line default
            #line hidden
            this.Write("\").Value as ");
            
            #line 90 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getCsharpType(row)));
            
            #line default
            #line hidden
            this.Write(";\r\n      ");
            
            #line 91 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    }\r\n    \r\n    ");
            
            #line 95 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 foreach(var row in gp.Where(x => true.Equals(x["IsOutPutParameter"]))){ 
            
            #line default
            #line hidden
            this.Write("\r\n    public ");
            
            #line 97 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getCsharpType(row)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 97 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getDbParamName(row)));
            
            #line default
            #line hidden
            this.Write(" { get; private set; }\r\n\r\n    ");
            
            #line 99 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n  }\r\n\r\n");
            
            #line 104 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"

  }

            
            #line default
            #line hidden
            this.Write("\r\n\r\n}\r\n\r\n");
            
            #line 111 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"

  var str = this.GenerationEnvironment.ToString().Trim();
  this.GenerationEnvironment.Clear();

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 116 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 118 "C:\git\tangsem.suite\Tangsem.Suite\projects\Tangsem.Generator\Templates\StoredProc\StoredProc.tt"

  public bool HasParams(IGrouping<string, DataRow> group){
    return !group.Any(x => x.IsNull("ParameterName"));
  }

  public bool HasInputParams(IGrouping<string, DataRow> group){
    return !group.Any(x => x.IsNull("ParameterName") && ! 1.Equals(x["IsOutPutParameter"]));
  }

  public string getParamNames(IGrouping<string, DataRow> group){
     return string.Join(", " , group.Select(x => getCsharpType(x) + " " + getParamName(x)));
  }

  public string getInputParamNames(IGrouping<string, DataRow> group){
     return string.Join(", " , group.Where(x => !true.Equals(x["IsOutPutParameter"])).Select(x => getCsharpType(x) + " " + getParamName(x)));
  }

  public string getParamName(DataRow row){
    var name = (row["ParameterName"] as String).Substring(1);
    name = name.Substring(0,1).ToLower() + name.Substring(1);

    return name;
  }

  public string getDbParamName(DataRow row){
    var name = (row["ParameterName"] as String).Substring(1);
    return name;
  }

  public string getCsharpType(DataRow dr)
  {
      var dbType = dr["ParameterDataType"] as string;

      switch(dbType){
        case "int": return "int?";
        case "smallint": return "short?";
        case "datetime": return "DateTime?";
        case "bit": return "bool?";        
        case "decimal": return "decimal?";
        case "nvarchar":
        case "varchar":
        case "nchar":
          return "string";

        case "binary":        
        case "image": return "byte[]";

        case "uniqueidentifier":
          return "Guid";
        default:
          return dbType + " Not Support";
      }
  }

  public string getNhNullableType(DataRow dr){

      var dbType = dr["ParameterDataType"] as string;

      switch(dbType){
        case "int": return "NHibernateUtil.Int32";
        case "smallint": return "NHibernateUtil.Int16";
        case "datetime": return "NHibernateUtil.DateTime";
        case "bit": return "NHibernateUtil.Boolean";        
        case "decimal": return "NHibernateUtil.Decimal";
        case "nvarchar":
        case "varchar":
        case "nchar":
          return "NHibernateUtil.String";
        
        case "binary":          
        case "image": return "NHibernateUtil.Binary";

        case "uniqueidentifier":
          return "NHibernateUtil.Guid";
        default:
          return dbType + " Not Support";
      }
  }


  
  public DataTable getDataTable(string dbConnecitonString){
  
    ////var dbConnecitonString = @"Data Source=(local);Initial Catalog=TEST2012_REOS;Integrated Security=True";
    ////var dbConnecitonString = @"Data Source=Airloom-Lee\R2;Initial Catalog=ArnottsMTA;User ID=sa;Password=sa";

    var dt = new DataTable();

      using(var conn = new SqlConnection(dbConnecitonString)){
        conn.Open();

        var cmd = conn.CreateCommand();
        cmd.CommandText = @"SELECT  SCHEMA_NAME(SCHEMA_ID) AS [Schema]
          , SO.name AS [ProcedureName]
          , SO.Type_Desc AS [ObjectType (UDF/SP)]
          , P.parameter_id AS [ParameterID]
          , P.name AS [ParameterName]
          , TYPE_NAME(P.user_type_id) AS [ParameterDataType]
          , P.max_length AS [ParameterMaxBytes]
          , P.is_output AS [IsOutPutParameter]
          , P.[default_value] AS [DefaultValue]
          , p.[has_default_value] AS [HasDefaultValue]
          --, object_definition(P.OBJECT_ID)
    FROM    sys.objects AS SO
            LEFT JOIN sys.parameters AS P ON SO.OBJECT_ID = P.OBJECT_ID
            -- AND P.is_output = 0 
    WHERE   
			--SO.OBJECT_ID IN ( SELECT  OBJECT_ID
   --                           FROM    sys.objects
   --                           WHERE   TYPE IN ( 'P', 'FN', 'F', 'IT' )
			--			)
   --         AND
			(SO.[name] LIKE 'p_%' OR SO.[name] LIKE 'fn_%')
            AND SO.[type_desc] IN('SQL_STORED_PROCEDURE', 'SQL_INLINE_TABLE_VALUED_FUNCTION')
            AND SO.[Name] NOT LIKE '%csgen%'
			AND SO.[Name] <> 'fn_diagramobjects'
    ORDER BY [Schema]
          , SO.name
          , P.parameter_id";
    

        var dr = cmd.ExecuteReader();

        dt.Load(dr);
    }

    return dt;
  }


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class StoredProcBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
