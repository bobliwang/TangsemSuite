@* Generator: Template *@
@inherits SingleTableMetadataTemplate
        
@using System.Linq
@using Tangsem.Generator.Metadata
@using Tangsem.Generator.Settings
@using Tangsem.Generator.Templates;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Data.Entity;

using Tangsem.EF.Mappings;
/* http://msdn.microsoft.com/en-us/library/hh295843(v=vs.103) */
namespace @(Configuration.MappingNamespace)
{
  /// <summary>
  /// The mapping configuration for @(TableMetadata.EntityName).
  /// </summary>
  public partial class @(TableMetadata.EntityName)Map : ClassMap<@(TableMetadata.EntityName)>
  {
    /// <summary>
    /// The constructor.
    /// </summary>
    public @(TableMetadata.EntityName)Map() : base()
    {
    }
    
    /// <summary>
    /// Map Table.
    /// </summary>
    protected override void MapTable(DbModelBuilder modelBuilder)
    {
      this.EntityTypeConfiguration.ToTable("@(TableMetadata.Name)");
    }

    /// <summary>
    /// Map the Primary Key.
    /// </summary>
    protected override void MapId(DbModelBuilder modelBuilder)
    {
    @if(TableMetadata.PrimaryKeys.Any())
    {<text>
        this.EntityTypeConfiguration
            .HasKey(x => x.@(TableMetadata.PrimaryKeys[0].PropertyName))
            .Property(x => x.@(TableMetadata.PrimaryKeys[0].PropertyName))
            .HasColumnName("@(TableMetadata.PrimaryKeys[0].ColumnName)");
    </text>}
    }
    
    /// <summary>
    /// Map the Basic Columns.
    /// </summary>
    protected override void MapBasicColumns(DbModelBuilder modelBuilder)
    {
      @foreach (var col in @TableMetadata.Columns.Where(c => (!c.IsOutgoingRefKey || !Configuration.GenRelationship) && !c.IsPrimaryKey))
      {<text>
         this.EntityTypeConfiguration
             .Property(x => x.@(col.PropertyName))
             .HasColumnName("@(col.ColumnName)")@if (col.Nullable) {<text>;</text>}else{<text>.IsRequired();</text>}
      </text>}

    }
    
    /// <summary>
    /// Map the MapRelationships.
    /// </summary>
    protected override void MapRelationships(DbModelBuilder modelBuilder)
    {
      @if (Configuration.GenRelationship) {
        foreach (var reference in this.TableMetadata.OutgoingReferences)
        {
          var optional = reference.ColumnPairs[0].ChildColumnMetadata.Nullable;
        <text>
          this.EntityTypeConfiguration
              .Has@(optional ? "Optional" : "Required")(x => x.@(reference.ParentPropertyName))
          .WithMany(x => x.@(reference.ChildListPropertyName))
          .Map(m => m.MapKey("@(reference.ColumnPairs[0].ChildColumnMetadata.ColumnName)"));
        </text>
        }
      }
    }
  }
}