@* Generator: Template *@
@inherits SingleTableMetadataTemplate

@using System.Linq
@using Tangsem.Generator.Metadata
@using Tangsem.Generator.Settings
@using Tangsem.Generator.Templates;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Linq.Expressions;

using Tangsem.Common.Entities;

namespace @Configuration.EntityNamespace
{
	public partial class @(TableMetadata.EntityName)@(TableMetadata.IsAuditableEntity ? @" : IAuditableEntity" : string.Empty)
	{
		@foreach (var col in @TableMetadata.Columns.Where(c => (!c.IsOutgoingRefKey || !Configuration.GenRelationship)))
		{<text>
		/// <summary>
		/// The property name '@col.PropertyName'. It matches the property to column '@col.ColumnName'.
		/// </summary>
		public static readonly string Prop_@(col.PropertyName) = "@col.PropertyName";
		
		/// <summary>
		/// The lamda expression for @col.PropertyName.
		/// </summary>
		public static readonly Expression<Func<@TableMetadata.EntityName, object>> Expr_@(col.PropertyName) = x => x.@(col.PropertyName);
		</text>}
		
		@if (Configuration.GenRelationship)
		{
    foreach (var reference in this.TableMetadata.OutgoingReferences)
		{<text>
		/// <summary>
		/// The property name '@(reference.ParentPropertyName)'. It is for the reference '@(reference.Name)'.
		/// </summary>
		public static readonly string Prop_@(reference.ParentPropertyName)  = "@(reference.ParentPropertyName)";

		/// <summary>
		/// The lamda expression for @(reference.ParentPropertyName).
		/// </summary>
		public static readonly Expression<Func<@(this.TableMetadata.EntityName), object>> Expr_@(reference.ParentPropertyName) = x => x.@(reference.ParentPropertyName);
		</text>}
		  
		}
    
		
		
		/// <summary>
		/// The default constructor for @(TableMetadata.EntityName) class.
		/// </summary>
		public @(TableMetadata.EntityName)()
    {
      @if (Configuration.GenRelationship)
      {
			  foreach (var reference in this.TableMetadata.IncomingReferences)
			  {<text>
			  this.@(reference.ChildListPropertyName) = new List<@(reference.ChildTableMetadata.EntityName)>();
			  </text>}
      }
		}


		#region "Basic Columns"

		@foreach (var col in @TableMetadata.Columns.Where(c => !c.IsOutgoingRefKey || !Configuration.GenRelationship))
		{<text>
		/// <summary>
		/// Property @col.PropertyName mapping to @(TableMetadata.Name).@(col.ColumnName)
		/// </summary>
		public virtual @col.CSharpTypeAsString @col.PropertyName { get; set; }
		</text>}
		
		#endregion
		
		#region "Outgoing References"
		@if (Configuration.GenRelationship)
		{
    foreach (var reference in @TableMetadata.OutgoingReferences)
		{<text>
		/// <summary>
		/// Gets or sets reference to @(reference.ParentPropertyName). ReferenceName: @(reference.Name).
		/// </summary>
		public virtual @(reference.ParentTableMetadata.EntityName) @(reference.ParentPropertyName) { get; set; }
		</text>}
    }
		#endregion
		
		#region "Incoming References"
@if (Configuration.GenRelationship) { 
		foreach (var reference in this.TableMetadata.IncomingReferences)
		{<text>
		@{ var childObjParamName = reference.ChildTableMetadata.EntityName.Substring(0, 1).ToLower() + reference.ChildTableMetadata.EntityName.Substring(1); }
		/// <summary>
		/// Field for the child list of Ref: @(reference.Name).
		/// </summary>
		public virtual IList<@(reference.ChildTableMetadata.EntityName)> @(reference.ChildListPropertyName) { get; set; }
		
		/// <summary>
		/// Add @(reference.ChildTableMetadata.EntityName) entity to @(reference.ChildListPropertyName).
		/// </summary>
		/// <param name="@(childObjParamName)">
		///	The @(reference.ChildTableMetadata.EntityName) entity.
		/// </param>
		public virtual void AddTo@(reference.ChildListPropertyName)(@(reference.ChildTableMetadata.EntityName) @(childObjParamName))
		{
			@(childObjParamName).@(reference.ParentPropertyName) = this;
			this.@(reference.ChildListPropertyName).Add(@(childObjParamName));
		}
		</text>}
}
		#endregion
		

	}
}