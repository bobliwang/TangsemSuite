<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Tangsem.Common.Extensions" #>

import {HttpClient} from '@angular/common/http';
import {Component, OnInit, ViewChild} from '@angular/core';
import {MatPaginator, MatSort} from '@angular/material';
import {merge, Observable, of as observableOf} from 'rxjs';
import {catchError, map, startWith, switchMap} from 'rxjs/operators';


@Component({
  selector: '<#= this.TableMetadata.EntityName #>-listing',
  templateUrl: '<#= this.TableMetadata.EntityName #>-listing.html',
})
export class <#= this.TableMetadata.EntityName #>ListingComponent {

	public <#= this.TableMetadata.EntityName.Lf() #>List: <#= this.TableMetadata.TsModelName #>[];

	public displayedColumns = [ <#= string.Join(", ", this.TableMetadata.Columns.Select(col => $"'{col.PropertyName.Lf()}'")) #>, "actions" ];


	public resultsLength = 0;
	public isLoadingResults = true;


	@ViewChild(MatPaginator) paginator: MatPaginator;
	@ViewChild(MatSort) sort: MatSort;

	constructor(private repoApi: <#=Configuration.RepositoryName#>ApiService) {
	
	}

	@Input()
	public filter: <#= this.TableMetadata.EntityName #>SearchParams;

	public ngOnInit() {
		if (!this.filter) {
			this.filter	= new <#= this.TableMetadata.EntityName #>SearchParams();
		}

		this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);
		

		merge(this.sort.sortChange, this.paginator.page).pipe(
			startWith({}),
			switchMap(() => {
			  this.isLoadingResults = true;

			  Object.assign(this.filter, {
			  	sortFieldName: this.sort.active,
			  	direction: this.sort.direction,
			  	pageIndex: this.paginator.pageIndex
			  });

			  return this.repoApi.get<#= this.TableMetadata.EntityName #>List(this.filter);
			}),
			map(data => {
			  // Flip flag to show that loading has finished.
			  this.isLoadingResults = false;
			  this.resultsLength = data.total_count;

			  return data.items;
			}),
			catchError(() => {
			  this.isLoadingResults = false;
			  // Catch if the GitHub API has reached its rate limit. Return empty data.

			  return observableOf([]);
			})
		  ).subscribe(data => this.<#= this.TableMetadata.EntityName.Lf() #>List = data);
	}

	public search() {
	}

}