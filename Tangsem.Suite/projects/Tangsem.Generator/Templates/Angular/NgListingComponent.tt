<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Tangsem.Common.Extensions" #>

import { Component, OnInit, AfterViewInit, ViewChild, Input } from '@angular/core';
import { Router } from '@angular/router';
import { MatSort, MatSnackBar, MatPaginator, MatTableDataSource, MatDialog, MatBottomSheet } from '@angular/material';
import { Observable } from 'rxjs/Rx';
import { merge } from 'rxjs/observable/merge';

import { <#=Configuration.RepositoryName#>ApiService } from '../../services/api.service';
import * as models from '../../models/models';

import { DialogsService } from '../../../services/dialogs.service';
import { ResultCode } from '../../../components/dialog/dialog.models';

<# foreach( var outgoingRef in this.TableMetadata.OutgoingReferences) { #>
import { <#= outgoingRef.ParentTableMetadata.EntityName #>DetailsDialog
	, <#= outgoingRef.ParentTableMetadata.EntityName #>SheetComponent
} from '../<#= outgoingRef.ParentTableMetadata.EntityName.Lf() #>/<#= outgoingRef.ParentTableMetadata.EntityName.Lf() #>-editor.component';
<# } #>


@Component({
  selector: '<#= this.TableMetadata.EntityName.Lf() #>-listing',
  templateUrl: '<#= this.TableMetadata.EntityName.Lf() #>-listing.component.html',
})
export class <#= this.TableMetadata.EntityName #>ListingComponent {

  public dataSource = [];

	@Input()
	public showLinkedEntityInBottomSheet = false;

  @Input()
  public displayedColumns = [ <#= string.Join(", ", this.TableMetadata.Columns.Select(col => $"'{col.PropertyName.Lf()}'")) #>, "actions" ];

  public resultsLength = 0;
  public isLoadingResults = true;

  @ViewChild(MatPaginator)
  public paginator: MatPaginator;

  @ViewChild(MatSort)
  public sort: MatSort;

  @Input()
  public templates = {};

  constructor(
    private router: Router,
    private snackBar: MatSnackBar,
    private matDialog: MatDialog,
		private matBottomSheet: MatBottomSheet,
    private dialogs: DialogsService,
    private repoApi: <#=Configuration.RepositoryName#>ApiService) {
  
  }

  @Input()
  public filterModel: models.<#= this.TableMetadata.EntityName #>SearchParams;

  public ngOnInit() {
    
    this.filterModel = this.filterModel || <models.<#= this.TableMetadata.EntityName #>SearchParams> {};

    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);

    Observable.merge(this.sort.sortChange, this.paginator.page).subscribe(() => {
      this.search();
    });
  }

  public ngAfterViewInit() {
    this.search();
  }

  public search() {

    this.filterModel.pageIndex = this.paginator.pageIndex || 0;
    this.filterModel.pageSize = this.paginator.pageSize || 100;
    this.filterModel.sortFieldName = this.sort.active || '';
    this.filterModel.direction = this.sort.direction || 'desc';


    this.repoApi.get<#= this.TableMetadata.EntityName #>List(this.filterModel).map(data => {
      // Flip flag to show that loading has finished.
      this.isLoadingResults = false;
      this.resultsLength = data.rowsCount;

      return data.pagedData;
    }).catch(() => {
      this.isLoadingResults = false;

      return Observable.of([]);
    }).subscribe(pagedData => this.dataSource = pagedData);
  }

  public delete(rowData: models.<#= this.TableMetadata.TsModelName #>) {
    this.dialogs.confirm('', 'Do you want to delete?', ResultCode.Yes).subscribe(confirmed => {
      if (!confirmed) {
        return;
      }

      this.repoApi.delete<#= this.TableMetadata.EntityName #>(rowData.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>).subscribe(() => {
        
        this.snackBar.open('Deleted successfully', null, { duration: 1000 });
        this.search();
      }, err => {
        this.snackBar.open('Failed to delete', null, { duration: 3000 });
      });
    });
  }

  public edit(rowData: models.<#= this.TableMetadata.TsModelName #>) {
    this.router.navigate([`<#= this.TableMetadata.EntityName.Lf() #>/${rowData.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>}/edit`]);
  }

  public add() {
    this.router.navigate(['<#= this.TableMetadata.EntityName.Lf() #>/create']);
  }


<# foreach( var outgoingRef in this.TableMetadata.OutgoingReferences) { #>

  public show<#= outgoingRef.ParentTableMetadata.EntityName #>Details(<#= outgoingRef.ParentTableMetadata.PrimaryKeys[0].PropertyName.Lf()#>: <#= outgoingRef.ParentTableMetadata.PrimaryKeys[0].TsTypeAsString #>) {

			const data = {
				<#= outgoingRef.ParentTableMetadata.PrimaryKeys[0].PropertyName.Lf()#>,
				title: `<#= outgoingRef.ParentPropertyName #> Details`
			};

			if (this.showLinkedEntityInBottomSheet) {
				this.matBottomSheet.open(<#= outgoingRef.ParentTableMetadata.EntityName #>SheetComponent, { data });
			} else {
				this.matDialog.open(<#= outgoingRef.ParentTableMetadata.EntityName #>DetailsDialog, {
					width: '80vw',
					data
				});
			}
	}

<# } #>

}