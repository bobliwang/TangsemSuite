<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Tangsem.Common.Extensions" #>

import { Router, ActivatedRoute } from '@angular/router';
import { Component, OnInit, ViewChild, Input, Output, EventEmitter, Inject } from '@angular/core';
import { MatPaginator, MatSort, MatSnackBar, MatDialogRef, MAT_DIALOG_DATA, MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material';
import * as models from '../../models/models';

import { <#=Configuration.RepositoryName#>ApiService } from '../../services/api.service';

import { DialogsService } from '../../../services/dialogs.service';
import { ResultCode } from '../../../components/dialog/dialog.models';

@Component({
  selector: '<#= this.TableMetadata.EntityName.Lf() #>-editor',
  templateUrl: '<#= this.TableMetadata.EntityName.Lf() #>-editor.component.html',
})
export class <#= this.TableMetadata.EntityName #>EditorComponent implements OnInit {

    @Input()
    public subscribeToRoutingParams = true;

    @Input()
    public <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #> = null;

    @Input()
    public loadOutgoingRefOptions = true;

    @Input()
    public isDialog = false;

    @Input()
    public hideActionBar = false;

	@Input()
	public model: models.<#= this.TableMetadata.TsModelName #>;

	@Input()
	public mode: models.EditorMode = 'create';

	@Input()
	public redirectToRoute = '<#= this.TableMetadata.EntityName.Lf() #>/listing';

    <# if (this.TableMetadata.OutgoingReferences != null && this.TableMetadata.OutgoingReferences.Any()) {#>

    //////////////////// Outgoing References BEGINGs ////////////////////////
        <# foreach(var outgoingRef in this.TableMetadata.OutgoingReferences) { #>

    @Input()
    public <#= outgoingRef.ParentPropertyName.Lf() #>Options: models.<#= outgoingRef.ParentTableMetadata.TsModelName #>[];

        <# } #>

    //////////////////// Outgoing References ENDs ////////////////////////
    <# } #>

    @Output()
    public onLoadDataError = new EventEmitter<any>();

    @Output()
    public onSaveSuccess = new EventEmitter<any>();

    @Output()
    public onSaveError = new EventEmitter<any>();
	
	constructor(
		private router: Router,
		private activatedRoute: ActivatedRoute,
		private snackBar: MatSnackBar,
		private dialogs: DialogsService,
		private repoApi: <#=Configuration.RepositoryName#>ApiService) {
	
	}

	public ngOnInit() {

        if (this.subscribeToRoutingParams) {
            this.activatedRoute.params.subscribe(params => {
			    const action = params['action'];
			    const <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #> = params['<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>'];

			    console.log(JSON.stringify({action, <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>}));

			    this.mode = action || this.mode;

			    if (this.mode === 'edit' || this.mode === 'view') {
				    this.loadData(<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>);
			    }
		    });
        } else if (this.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #> != null && !this.model) {
            this.loadData(this.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>);
        }

		this.model = this.model || {};

        if (this.loadOutgoingRefOptions) {

            <# if (this.TableMetadata.OutgoingReferences != null && this.TableMetadata.OutgoingReferences.Any()) {#>

            //////////////////// Outgoing References BEGINGs ////////////////////////
                <# foreach(var outgoingRef in this.TableMetadata.OutgoingReferences) { #>

            this.repoApi.get<#= outgoingRef.ParentTableMetadata.EntityName #>List( <models.<#= outgoingRef.ParentTableMetadata.EntityName #>SearchParams> { sortFieldName: '', direction: '', pageIndex: 0, pageSize: 1000 }).subscribe(pagingResult => {
                this.<#= outgoingRef.ParentPropertyName.Lf() #>Options = pagingResult.pagedData;
            });

                <# } #>

            //////////////////// Outgoing References ENDs ////////////////////////
            <# } #>

        }
	}

    public loadData(<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>: number | string) {
        this.repoApi.get<#= this.TableMetadata.EntityName #>By<#= this.TableMetadata.PrimaryKeyPropertyName #>(<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>).subscribe(result => {
			this.model = result;
		}, err => {
            console.error(`unable to load <#= this.TableMetadata.EntityName #> by <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #> ${<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>}`, err);
            this.onLoadDataError.emit({ error: err, <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>: <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>});
        });
    }

	public save() {
		if (this.mode === 'create') {
			this.create();
		} else if (this.mode === 'edit') {
			this.update();
		}
	}

	protected create() {

		this.repoApi.create<#= this.TableMetadata.EntityName #>(this.model).subscribe(result => {
			if (result && result.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>) {
				this.model.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #> = result.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>;
			}

			this.snackBar.open('created successfully', null, { duration: 1000 });

			if (this.redirectToRoute) {
				this.router.navigate([this.redirectToRoute]);	
			}
			
		}, err => {
			this.snackBar.open('failed to create', null, { duration: 3000 });
		});
	}

	protected update() {

		this.repoApi.update<#= this.TableMetadata.EntityName #>(this.model.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>, this.model).subscribe(result => {
			if (result && result.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>) {
				this.model.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #> = result.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>;
			}

			this.snackBar.open('updated successfully', null, { duration: 1000 });
			this.onSaveSuccess.emit({ model: this.model });

			if (this.redirectToRoute) {
				this.router.navigate([this.redirectToRoute]);	
			}
		}, err => {
			this.snackBar.open('failed to updade', null, { duration: 3000 });
            this.onSaveError.emit({ error: err, model: this.model });
		});
	}

	protected cancel() {
		if (this.redirectToRoute) {
			this.dialogs.confirm('', 'Do you want to cancel?', ResultCode.Yes).subscribe(confirmed => {
				if (confirmed) {
					this.router.navigate([this.redirectToRoute]);
				}
			});			
		}
	}
}

@Component({
  selector: '<#= this.TableMetadata.EntityName.Lf() #>-details-dialog',
  template: `
    <h4 mat-dialog-title *ngIf="!!data.title">
        {{ data.title }}
    </h4>
    <div mat-dialog-content>
      <<#= this.TableMetadata.EntityName.Lf() #>-editor
        [<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>]="data.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>" [subscribeToRoutingParams]="false" [isDialog]="true"></<#= this.TableMetadata.EntityName.Lf() #>-editor>
    </div>
    <div mat-dialog-actions align="end">
      <button mat-button (click)="close()">Close</button>      
    </div>
  `,
})
export class <#= this.TableMetadata.EntityName #>DetailsDialog {

  constructor(
    public dialogRef: MatDialogRef<<#= this.TableMetadata.EntityName #>DetailsDialog>,
    @Inject(MAT_DIALOG_DATA) public data: { <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>: <#= this.TableMetadata.PrimaryKeyTsTypeAsString #>, title?: string }) {
  }

  public close(): void {
    this.dialogRef.close();
  }
}


@Component({
	selector: '<#= this.TableMetadata.EntityName.Lf() #>-sheet',
	template: `
		<div class="flex-columns">
			<div></div>
			<button mat-button (click)="close($event)">
				<mat-icon>close</mat-icon>
			</button>
		</div>
		<div class="sheet-container">
			<<#= this.TableMetadata.EntityName.Lf() #>-editor
				[subscribeToRoutingParams]="false"
				[isDialog]="true"
				[<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>]="data.<#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>"
				></<#= this.TableMetadata.EntityName.Lf() #>-editor>
		</div>
	`,
})
export class <#= this.TableMetadata.EntityName #>SheetComponent {
	constructor(private bottomSheetRef: MatBottomSheetRef<<#= this.TableMetadata.EntityName #>SheetComponent>,
		@Inject(MAT_BOTTOM_SHEET_DATA) public data: { <#= this.TableMetadata.PrimaryKeyPropertyName.Lf() #>: <#= this.TableMetadata.PrimaryKeyTsTypeAsString #>, title?: string }) { }

	public close(event: MouseEvent): void {
		this.bottomSheetRef.dismiss();
		event.preventDefault();
	}
}