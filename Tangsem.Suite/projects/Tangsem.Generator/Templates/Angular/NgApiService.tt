<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Tangsem.Common.Extensions" #>
<#@ import namespace="Tangsem.Generator.Templates" #>
<#@ import namespace="Tangsem.Generator.Settings" #>

import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import * as models from '../models/models';

export class <#=Configuration.RepositoryName#>ApiService {

    construct(protected httpClient: HttpClient) {
    }


<# foreach (var tableMetadata in this.TableMetadatas) { #>

     
     public get<#=tableMetadata.EntityName#>List(filterModel: models.<#= tableMetadata.EntityName #>SearchParams): Observable<models.SearchResultModel<models.<#=tableMetadata.TsModelName#>>> {
		const searchParams = this.populate<#=tableMetadata.EntityName#>SearchParams(filterModel);

        return this.httpClient.get<models.SearchResultModel<models.<#=tableMetadata.TsModelName#>>>(`_api/repo/<#=tableMetadata.EntityName#>`, { params: searchParams });
     }
     
     public get<#=tableMetadata.EntityName#>ById(id: number | string): Observable<models.<#=tableMetadata.TsModelName#>> {
        return this.httpClient.get<models.<#=tableMetadata.TsModelName#>>(`_api/repo/<#=tableMetadata.EntityName#>/${id}`);
     }
     
     public update<#=tableMetadata.EntityName#>(id: number | string, model: models.<#=tableMetadata.TsModelName#>): Observable<any> {
        return this.httpClient.post<any>(`_api/repo/<#=tableMetadata.EntityName#>/${id}`, model);
     }
     
     public create<#=tableMetadata.EntityName#>(id: number | string, model: models.<#=tableMetadata.TsModelName#>): Observable<models.<#=tableMetadata.TsModelName#>> {
        return this.httpClient.post<any>(`_api/repo/<#=tableMetadata.EntityName#>`, model);
     }

	 public delete<#=tableMetadata.EntityName#>(id: number | string): Observable<any> {
        return this.httpClient.post<any>(`_api/repo/<#=tableMetadata.EntityName#>/delete/${id}`);
     }

	 protected populate<#=tableMetadata.EntityName#>SearchParams(filterModel: models.<#= tableMetadata.EntityName #>SearchParams): HttpParams {
		

		let params = new HttpParams();

		if (filterModel) {
			params = params.set('sortFieldName', filterModel.sortFieldName)
						   .set('direction', filterModel.direction)
						   .set('pageIndex', filterModel.pageIndex.toString())
						   .set('pageSize', filterModel.pageSize.toString());

			<# foreach (var col in tableMetadata.Columns) { #>

			if (filterModel.<#= col.PropertyName.Lf() #>)
			{
				params = params.set('<#= col.PropertyName.Lf() #>', filterModel.<#= col.PropertyName.Lf() #>.toString());

			}
			<# } #>

		}

		return params;
	 }


 <# } #>

}
