<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Tangsem.Common.Extensions" #>
<#@ import namespace="Tangsem.Generator.Templates" #>
<#@ import namespace="Tangsem.Generator.Settings" #>

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import * as models from '../models/models';

@Injectable()
export class <#=Configuration.RepositoryName#>ApiService {

	private _apiBaseUrl = '';

    constructor(protected httpClient: HttpClient) {
    }

	public setApiBaseUrl(val: string) {
		this._apiBaseUrl = val;
	}

	public url(path: string) {
		return `${this._apiBaseUrl}/${path}`;
	}

    
	public updateSearchParams(params: HttpParams, filterModel: any): HttpParams {
        filterModel.sortFieldName = filterModel.sortFieldName || '';
        filterModel.direction = filterModel.direction || '';
        filterModel.pageIndex = filterModel.pageIndex || 0;
        filterModel.pageSize = filterModel.pageSize || 0;
        
		params = params.set('sortFieldName', filterModel.sortFieldName)
						.set('direction', filterModel.direction)
						.set('pageIndex', filterModel.pageIndex.toString())
						.set('pageSize', filterModel.pageSize.toString());

	    Object.keys(filterModel).forEach(keyName => {
		    if (filterModel[keyName] != null) {
			    params = params.set(keyName, filterModel[keyName].toString());
		    }
	    });

	    return params;
	}


<# foreach (var tableMetadata in this.TableMetadatas) { #>

     
     public get<#=tableMetadata.EntityName#>List(filterModel: models.<#= tableMetadata.EntityName #>SearchParams): Observable<models.SearchResultModel<models.<#=tableMetadata.TsModelName#>>> {
		const searchParams = this.populate<#=tableMetadata.EntityName#>SearchParams(filterModel);

        return this.httpClient.get<models.SearchResultModel<models.<#=tableMetadata.TsModelName#>>>(this.url(`_api/repo/<#=tableMetadata.EntityName#>`), { params: searchParams });
     }
     
     public get<#=tableMetadata.EntityName#>By<#= tableMetadata.PrimaryKeyPropertyName #>(id: number | string): Observable<models.<#=tableMetadata.TsModelName#>> {
        return this.httpClient.get<models.<#=tableMetadata.TsModelName#>>(this.url(`_api/repo/<#=tableMetadata.EntityName#>/${id}`));
     }
     
     public update<#=tableMetadata.EntityName#>(id: number | string, model: models.<#=tableMetadata.TsModelName#>): Observable<any> {
        return this.httpClient.post<any>(this.url(`_api/repo/<#=tableMetadata.EntityName#>/${id}`), model);
     }
     
     public create<#=tableMetadata.EntityName#>(model: models.<#=tableMetadata.TsModelName#>): Observable<models.<#=tableMetadata.TsModelName#>> {
        return this.httpClient.post<any>(this.url(`_api/repo/<#=tableMetadata.EntityName#>`), model);
     }

	 public delete<#=tableMetadata.EntityName#>(id: number | string): Observable<any> {
        return this.httpClient.post<any>(this.url(`_api/repo/<#=tableMetadata.EntityName#>/${id}/delete`), {});
     }

	 protected populate<#=tableMetadata.EntityName#>SearchParams(filterModel: models.<#= tableMetadata.EntityName #>SearchParams): HttpParams {
		

		let params = new HttpParams();

		if (filterModel) {            
            params = this.updateSearchParams(params, filterModel);
		}

		return params;
	 }


 <# } #>

}
