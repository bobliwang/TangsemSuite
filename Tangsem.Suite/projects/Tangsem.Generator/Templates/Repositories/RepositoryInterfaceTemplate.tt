<#@ template language="C#" inherits="Tangsem.Common.T4.T4TemplateBase"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="Tangsem.Common.Extensions" #>
<#@ import namespace="Tangsem.Generator.Templates" #>


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Expressions;

using Tangsem.Data.Domain;


using <#= Configuration.EntityNamespace #>;


namespace <#= Configuration.RepositoryNamespace #>
{
	/// <summary>
	/// The I<#= Configuration.RepositoryName #> interface.
	/// </summary>
	public partial interface I<#= Configuration.RepositoryName #> : IRepository
	{

		<# foreach (var tableMetadata in this.TableMetadatas) { #>

		/// <summary>
		/// Maps to database table/view <#= tableMetadata.Name#>. The IQueryable for <#= tableMetadata.EntityName.Pluralize()#>.
		/// </summary>
		IQueryable<<#= tableMetadata.EntityName #>> <#= tableMetadata.EntityName.Pluralize() #> { get; }
	
		<# } #>
		
		
		<# foreach (var tableMetadata in this.TableMetadatas.Where(x => !x.IsView)) { #>
		/// <summary>
		/// Get <#= tableMetadata.EntityName #> by primary key.
		/// </summary>
		<#= tableMetadata.EntityName #> Lookup<#= tableMetadata.EntityName #>By<#= tableMetadata.PrimaryKeys[0].PropertyName#>(<#= tableMetadata.PrimaryKeys[0].CSharpTypeAsString#> <#= tableMetadata.PrimaryKeys[0].PropertyName.LowerFirst()#>);

		/// <summary>
		/// Get <#= tableMetadata.EntityName #> by primary key.
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> Lookup<#= tableMetadata.EntityName #>By<#= tableMetadata.PrimaryKeys[0].PropertyName #>Async(<#= tableMetadata.PrimaryKeys[0].CSharpTypeAsString #> <#= tableMetadata.PrimaryKeys[0].PropertyName.LowerFirst() #>);

		/// <summary>
		/// Delete <#= tableMetadata.EntityName #> by primary key.
		/// </summary>
		<#= tableMetadata.EntityName #> Delete<#= tableMetadata.EntityName #>By<#= tableMetadata.PrimaryKeys[0].PropertyName #>(<#= tableMetadata.PrimaryKeys[0].CSharpTypeAsString #> <#= tableMetadata.PrimaryKeys[0].PropertyName.LowerFirst() #>);
		
		/// <summary>
		/// Delete <#= tableMetadata.EntityName #> by primary key.
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> Delete<#= tableMetadata.EntityName #>By<#= tableMetadata.PrimaryKeys[0].PropertyName #>Async(<#= tableMetadata.PrimaryKeys[0].CSharpTypeAsString #> <#= tableMetadata.PrimaryKeys[0].PropertyName.LowerFirst() #>);
		
		<# foreach (var uniqueKey in tableMetadata.UniqueKeys.Where(x => !x.IsPrimaryKey))
		{
			var combinedKeyColumnNames = string.Join(", ", uniqueKey.Columns.Select(x => x.PropertyName));
			var combinedArguments = string.Join(", ", uniqueKey.Columns.Select(x => x.CSharpTypeAsString + " " + x.PropertyName.LowerFirst()));
			#>
		#region <#= uniqueKey.Name#>
	
		/// <summary>
		/// Lookup <#= tableMetadata.EntityName #> by <#= combinedKeyColumnNames #>
		/// </summary>
		<#= tableMetadata.EntityName #> Lookup<#= tableMetadata.EntityName #>By<#= combinedKeyColumnNames #>(<#= combinedArguments #>, System.Linq.Expressions.Expression<Func<<#= tableMetadata.EntityName #>, bool>> extraFilter = null);
		
		/// <summary>
		/// Lookup <#= tableMetadata.EntityName #> by <#= combinedKeyColumnNames #> async
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> Lookup<#= tableMetadata.EntityName #>By<#= combinedKeyColumnNames#>Async(<#= combinedArguments#>, System.Linq.Expressions.Expression<Func<<#= tableMetadata.EntityName #>, bool>> extraFilter = null);
		
		/// <summary>
		/// Deletes <#= tableMetadata.EntityName #> by <#= combinedKeyColumnNames #>
		/// </summary>
		<#= tableMetadata.EntityName #> Delete<#= tableMetadata.EntityName #>By<#= combinedKeyColumnNames #>(<#= combinedArguments #>);
		
		/// <summary>
		/// Deletes <#= tableMetadata.EntityName #> by <#= combinedKeyColumnNames #> async.
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> Delete<#= tableMetadata.EntityName #>By<#= combinedKeyColumnNames #>Async(<#= combinedArguments #>);

		#endregion
		<# } #>

		/// <summary>
		/// Save a new <#= tableMetadata.EntityName #> instance.
		/// </summary>
		<#= tableMetadata.EntityName #> Save<#= tableMetadata.EntityName #>(<#= tableMetadata.EntityName #> <#= tableMetadata.EntityName.LowerFirst() #>);
    
		/// <summary>
		/// Save a new <#= tableMetadata.EntityName #> instance.
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> Save<#= tableMetadata.EntityName #>Async(<#= tableMetadata.EntityName #> <#= tableMetadata.EntityName.LowerFirst() #>);
		
		/// <summary>
		/// Update an existing <#= tableMetadata.EntityName #> instance.
		/// </summary>
		<#= tableMetadata.EntityName #> Update<#= tableMetadata.EntityName #>(<#= tableMetadata.EntityName #> <#= tableMetadata.EntityName.LowerFirst() #>);
		
		/// <summary>
		/// Update an existing <#= tableMetadata.EntityName #> instance.
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> Update<#= tableMetadata.EntityName #>Async(<#= tableMetadata.EntityName #> <#= tableMetadata.EntityName.LowerFirst() #>);
		
		/// <summary>
		/// Save or update an existing <#= tableMetadata.EntityName #> instance.
		/// </summary>
		<#= tableMetadata.EntityName #> SaveOrUpdate<#= tableMetadata.EntityName #>(<#= tableMetadata.EntityName #> <#= tableMetadata.EntityName.LowerFirst() #>);

		/// <summary>
		/// Save or update an existing <#= tableMetadata.EntityName #> instance.
		/// </summary>
		System.Threading.Tasks.Task<<#= tableMetadata.EntityName #>> SaveOrUpdate<#= tableMetadata.EntityName #>Async(<#= tableMetadata.EntityName #> <#= tableMetadata.EntityName.LowerFirst() #>);

		<# } #>

	}
}
