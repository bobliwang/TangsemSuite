<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using AutoMapper;
using <#= Configuration.EntityNamespace #>;
using <#= Configuration.DTONamespace #>;

namespace <#= Configuration.DomainNamespace #>.Mappings.AutoMapper
{

	public partial class <#= this.TableMetadata.EntityName #>MappingProfile : Profile
	{
	    private readonly IRepoProvider repoProvider;

		public <#= this.TableMetadata.EntityName #>MappingProfile (IRepoProvider repoProvider)
		{
            this.repoProvider = repoProvider;

            // Entity to DTO
            var mappingToDto = this.CreateMap<<#= this.TableMetadata.EntityName #>, <#= this.TableMetadata.EntityName #>DTO>();
            this.SetupMappingToDto(mappingToDto);
		  
            // DTO to Entity
            // Using mappingToDto.ReverseMap(); will cause issues: https://github.com/AutoMapper/AutoMapper/issues/1764
            // MapFrom/ResolveUsing no longer support null assignment
            //  - It has something to do with ReverseMap() and resolving the same property in the first mapping.
            //  - If I split the logic into two different CreateMap declarations, it works correctly.
		    var mappingEntity = this.CreateMap<<#= this.TableMetadata.EntityName #>DTO, <#= this.TableMetadata.EntityName #>>();
            this.SetupMappingToEntity(mappingEntity);
		}

        public virtual void SetupMappingToEntity(IMappingExpression<<#= this.TableMetadata.EntityName #>DTO, <#= this.TableMetadata.EntityName #>> mappingEntity)
	    {
            mappingEntity.ForMember(x => x.<#= this.TableMetadata.PrimaryKeyPropertyName #>, opts => opts.Condition(s => s.<#= this.TableMetadata.PrimaryKeyPropertyName #> != default(<#= this.TableMetadata.PrimaryKeyClrType #>)));

            <# if( this.TableMetadata.IsAuditableEntity) { #>

            // ignore auditing columns
	        mappingEntity.ForMember(x => x.CreatedById, opts => opts.Ignore());
	        mappingEntity.ForMember(x => x.ModifiedById, opts => opts.Ignore());
	        mappingEntity.ForMember(x => x.CreatedTime, opts => opts.Ignore());
	        mappingEntity.ForMember(x => x.ModifiedTime, opts => opts.Ignore());

            mappingEntity.ForMember(x => x.Active, opts => opts.Condition(s => s.Active != null));

            <# } #>
            
            
            <# foreach(var outgingRef in this.TableMetadata.OutgoingReferences) { #>

            mappingEntity.ForMember(x => x.<#= outgingRef.ParentPropertyName #>, opts => opts.ResolveUsing((s, t) =>
	        {
                <# if (outgingRef.ColumnPairs[0].ChildColumnMetadata.Nullable) { #>

	            if (s.<#= outgingRef.ColumnPairs[0].ChildColumnMetadata.PropertyName #> == null)
	            {
	                return null;
	            }

                <# } #>

	            if (t.<#= outgingRef.ParentPropertyName #> != null && s.<#= outgingRef.ColumnPairs[0].ChildColumnMetadata.PropertyName #> == t.<#= outgingRef.ParentPropertyName #>.<#= outgingRef.ColumnPairs[0].ParentColumnMetadata.PropertyName #>)
	            {
                    // same id value, use source.
	                return t.<#= outgingRef.ParentPropertyName #>;
	            }

	            var repo = this.repoProvider.Get();

                <# if (outgingRef.ColumnPairs[0].ChildColumnMetadata.Nullable) { #>

	            return repo.Lookup<#= outgingRef.ParentTableMetadata.EntityName #>By<#= outgingRef.ParentTableMetadata.PrimaryKeyPropertyName #>(s.<#= outgingRef.ColumnPairs[0].ChildColumnMetadata.PropertyName #>.Value);
                <# } else { #>

                return repo.Lookup<#= outgingRef.ParentTableMetadata.EntityName #>By<#= outgingRef.ParentTableMetadata.PrimaryKeyPropertyName #>(s.<#= outgingRef.ColumnPairs[0].ChildColumnMetadata.PropertyName #>);
                <# } #>
	        }));

            <# } #>
	    
        }

	    public virtual void SetupMappingToDto(IMappingExpression<<#= this.TableMetadata.EntityName #>, <#= this.TableMetadata.EntityName #>DTO> mappingToDto)
	    {
            <# foreach(var outgingRef in this.TableMetadata.OutgoingReferences) { #>
	        mappingToDto.ForMember(x => x.<#= outgingRef.ColumnPairs[0].ChildColumnMetadata.PropertyName #>, opts => opts.ResolveUsing((s, t) => <# if (outgingRef.ColumnPairs[0].ChildColumnMetadata.Nullable) { #>s.<#= outgingRef.ParentPropertyName #>?.<#= outgingRef.ParentTableMetadata.PrimaryKeyPropertyName #><# } else { #>s.<#= outgingRef.ParentPropertyName #>.<#= outgingRef.ParentTableMetadata.PrimaryKeyPropertyName #><# } #>));
            <# } #>

            this.SetupMappingToDtoExtra(mappingToDto);
        }

        partial void SetupMappingToDtoExtra(IMappingExpression<<#= this.TableMetadata.EntityName #>, <#= this.TableMetadata.EntityName #>DTO> mappingToDto);
	}
}