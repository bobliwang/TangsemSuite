<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Tangsem.Common.Extensions" #>

<#
	var tableMetadata = this.TableMetadata;
#>

using System.Linq;
using Microsoft.AspNetCore.Mvc;
using AutoMapper;
using <#= Configuration.RepositoryNamespace #>;
using <#= Configuration.EntityNamespace #>;
using <#= Configuration.DTONamespace #>;
using <#= Configuration.DomainNamespace #>.ViewModels.SearchParams;

using Tangsem.Data;
using Tangsem.NHibernate.Extenstions;
using <#= Configuration.RootProjectName #>.Host.Filters;
using <#= Configuration.RootProjectName #>.Host.Controllers.Base;

namespace <#= Configuration.RootProjectName #>.Host.Controllers
{
	public partial class <#= tableMetadata.EntityName #>ApiController : <#= tableMetadata.EntityName #>ApiControllerBase
	{	
		public <#= tableMetadata.EntityName #>ApiController(I<#= Configuration.RepositoryName #> repository, IMapper mapper): base(repository, mapper) {
		}

		[HttpGet("_api/repo/<#=tableMetadata.EntityName#>")]
		public override IActionResult Get<#=tableMetadata.EntityName#>List(<#=tableMetadata.EntityName#>SearchParams filterModel) {
            return base.Get<#=tableMetadata.EntityName#>List(filterModel);
		}
     
		[HttpGet("_api/repo/<#=tableMetadata.EntityName#>/{id}")]
		public override IActionResult Get<#=tableMetadata.EntityName#>By<#= tableMetadata.PrimaryKeyPropertyName #>(<#= tableMetadata.PrimaryKeyCSharpTypeAsString #> id) {
			return base.Get<#=tableMetadata.EntityName#>By<#= tableMetadata.PrimaryKeyPropertyName #>(id);
		}

		[HttpPost("_api/repo/<#=tableMetadata.EntityName#>/{id}")]
		[TransactionFilter]
		public override IActionResult Update<#=tableMetadata.EntityName#>(<#= tableMetadata.PrimaryKeyCSharpTypeAsString #> id, [FromBody] <#=tableMetadata.EntityName#>DTO model) {
		    return base.Update<#=tableMetadata.EntityName#>(id, model);
		}
     
		[HttpPost("_api/repo/<#=tableMetadata.EntityName#>")]
		[TransactionFilter]
		public override IActionResult Create<#=tableMetadata.EntityName#>([FromBody] <#=tableMetadata.EntityName#>DTO model) {
			return base.Create<#=tableMetadata.EntityName#>(model);
		}

		[HttpPost("_api/repo/<#=tableMetadata.EntityName#>/{id}/delete")]
		[TransactionFilter]
		public override IActionResult Delete<#=tableMetadata.EntityName#>(<#= tableMetadata.PrimaryKeyCSharpTypeAsString #> id, bool isHardDelete) {
            return base.Delete<#=tableMetadata.EntityName#>(id, isHardDelete);
		}

		public override IQueryable<<#=tableMetadata.EntityName#>> FilterBySearchParams(IQueryable<<#=tableMetadata.EntityName#>> qry, <#=tableMetadata.EntityName#>SearchParams filterModel) {
            return base.FilterBySearchParams(qry, filterModel);
		}
	}

}