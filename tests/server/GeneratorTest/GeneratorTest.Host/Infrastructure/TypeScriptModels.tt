<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


<#@ import namespace="Swashbuckle.AspNetCore.Swagger" #>
<#@ import namespace="Microsoft.AspNetCore.Mvc.Controllers" #>
<#@ import namespace="GeneratorTest.Host.Infrastructure" #>

/**
 * This is the base model for search/paging/sorting.
 */
export interface SearchResultModel<T> {
    
    pageIndex?: number;
    
    pageSize?: number;
    
    rowsCount?: number;
    
    pagedData?: T[];
    
}

/********************* ENUMs BEGIN ***************************/

<# foreach (var schemaDictionaryItem in this.SwaggerDoc.Definitions) {
    Schema schema = schemaDictionaryItem.Value;
    foreach (var propertyDictionaryItem in schema.Properties) {
        Schema property = propertyDictionaryItem.Value;
        IList<object> propertyEnums = property.Enum;
        if (propertyEnums != null && propertyEnums.Count > 0) {#>

export enum <#= propertyEnums[0].GetType().Name #> {
    <# foreach(var val in propertyEnums) { #>

        <#= val.ToString() #> = <#= (int)val #>,
    <# } #>

}
    <# }
    }
}
#>

/********************* TYPEs BEGIN ***************************/

<# foreach(var typeKvp in this.SwaggerDoc.Definitions) {
    var typeName = typeKvp.Key;
    var typeInfo = typeKvp.Value;

    if (typeName.Contains("[") && typeName.Contains("]") && !typeName.Contains("[]")){
        continue;
    }
#>

export interface <#= typeName #> {
    <# foreach(var propKvp in typeInfo.Properties) { #>

    <#= Generator.PropertyExpression(propKvp.Key, propKvp.Value) #>;
    <# } #>

}
     
<# } #>

