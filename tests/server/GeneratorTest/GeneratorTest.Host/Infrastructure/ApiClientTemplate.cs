// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GeneratorTest.Host.Infrastructure
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Swashbuckle.AspNetCore.Swagger;
    using Microsoft.AspNetCore.Mvc.Controllers;
    using GeneratorTest.Host.Infrastructure;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ApiClientTemplate : ApiClientTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\n");
            this.Write("\r\n// tslint:disable\r\nimport { Injectable, Inject, Optional } from \'@angular/core\'" +
                    ";\r\nimport { HttpClient, HttpParams } from \'@angular/common/http\';\r\nimport { Obse" +
                    "rvable } from \'rxjs\';\r\nimport * as ");
            
            #line 16 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelsModuleName));
            
            #line default
            #line hidden
            this.Write(" from \'");
            
            #line 16 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ModelsTsFilePath));
            
            #line default
            #line hidden
            this.Write("\';\r\n\r\n/**\r\n * Auto-Generated client code that should not be modified manually.\r\n " +
                    "*/\r\n@Injectable(");
            
            #line 21 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsRootProvider ? @"{
  providedIn: 'root'
}" : string.Empty));
            
            #line default
            #line hidden
            this.Write(")\r\nexport class ");
            
            #line 24 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ApiClientClassName));
            
            #line default
            #line hidden
            this.Write(" {\r\n\r\n  public constructor(\r\n    private httpClient: HttpClient,\r\n    @Optional()" +
                    "\r\n    @Inject(\'API_URL_BASE\')\r\n    public apiUrlBase: string) {\r\n  }\r\n\r\n");
            
            #line 33 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"


  foreach(var pathKvp in this.SwaggerDoc.Paths) {
    var pathKey = pathKvp.Key;
    var pathInfo = pathKvp.Value;
    var operations = new Dictionary<string, Func<PathItem, Operation>>
                       {
                         ["get"] = pi => pi.Get,
                         ["post"] = pi => pi.Post,
                         ["put"] = pi => pi.Put
                        }.Select(x => new KeyValuePair<string, Operation>(x.Key, x.Value(pathInfo))).Where(x => x.Value != null);

    var apiDescriptions = this.GetApiDescriptions();

    foreach(var opKvp in operations) {
      var operation = opKvp.Value;

      if (!operation.Tags.Any(x => "autogen".Equals(x, StringComparison.InvariantCultureIgnoreCase))) {
        continue;
      }
        
      var httpMethod = opKvp.Key;
      var api = apiDescriptions.FirstOrDefault(x => opKvp.Key.Equals(x.HttpMethod, StringComparison.InvariantCultureIgnoreCase) && $"/{x.RelativePath}" == pathKey);
      var actionDescriptor = api.ActionDescriptor as ControllerActionDescriptor;
      var operationParameters = operation.Parameters ?? new IParameter[0];
      var bodyParameters = operationParameters.Where(x => x is BodyParameter).Cast<BodyParameter>().ToList();
      var nonBodyParameters = operationParameters.Where(x => x is NonBodyParameter).Cast<NonBodyParameter>().ToList();
      var pathParams = nonBodyParameters.Where(x => pathKey.Contains("{" + x.Name + "}")).ToList();
      var queryStringParams = nonBodyParameters.Where(x => !pathKey.Contains("{" + x.Name + "}")).ToList();
        // TODO: we may need to support header params later.

            
            #line default
            #line hidden
            this.Write("       \r\n  /**\r\n    * HTTP Method: ");
            
            #line 66 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(httpMethod));
            
            #line default
            #line hidden
            this.Write(", Path: ");
            
            #line 66 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pathKey));
            
            #line default
            #line hidden
            this.Write("\r\n    * Action: ");
            
            #line 67 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actionDescriptor.ActionName));
            
            #line default
            #line hidden
            this.Write(", Controller: ");
            
            #line 67 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(actionDescriptor.ControllerName));
            
            #line default
            #line hidden
            this.Write("\r\n    */\r\n  public ");
            
            #line 69 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.GetApiActonName(actionDescriptor, api)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 69 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.ApiCallParamStrings(queryStringParams, bodyParameters, pathParams, this.ModelsModuleName)));
            
            #line default
            #line hidden
            this.Write("): Observable<");
            
            #line 69 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.GetResponseType(operation, this.ModelsModuleName)));
            
            #line default
            #line hidden
            this.Write("> {\r\n      ");
            
            #line 70 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 if (pathParams.Any()) { 
            
            #line default
            #line hidden
            this.Write("\r\n      const url = this.url(\'");
            
            #line 72 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pathKey));
            
            #line default
            #line hidden
            this.Write("\')\r\n      ");
            
            #line 73 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 foreach(var p in pathParams) { 
            
            #line default
            #line hidden
            this.Write("          .replace(\'{");
            
            #line 74 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write("}\', `${");
            
            #line 74 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.LowerCaseFirst(p.Name)));
            
            #line default
            #line hidden
            this.Write("}`)\r\n      ");
            
            #line 75 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(";\r\n      ");
            
            #line 76 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n      const url = this.url(\'");
            
            #line 78 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pathKey));
            
            #line default
            #line hidden
            this.Write("\');\r\n      ");
            
            #line 79 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 80 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 if (queryStringParams.Any()) {
            
            #line default
            #line hidden
            this.Write("\r\n      const params = this.getHttpParams(qryParams);\r\n      ");
            
            #line 83 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
} 
            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 84 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"

      var bodyParams = operationParameters.Where(p => p is BodyParameter);
      if (bodyParams.Any()) { 
            
            #line default
            #line hidden
            this.Write("        \r\n      return this.httpClient.");
            
            #line 88 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(httpMethod));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 88 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.GetResponseType(operation, this.ModelsModuleName)));
            
            #line default
            #line hidden
            this.Write(">(url, ");
            
            #line 88 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",", bodyParams.Select(p => $"{Generator.LowerCaseFirst(p.Name)}"))));
            
            #line default
            #line hidden
            
            #line 88 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(queryStringParams.Any() ? ", { params }" : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n      ");
            
            #line 89 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } else if (httpMethod == "post") { 
            
            #line default
            #line hidden
            this.Write("        \r\n      return this.httpClient.post<");
            
            #line 91 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.GetResponseType(operation, this.ModelsModuleName)));
            
            #line default
            #line hidden
            this.Write(">(url, null);\r\n      ");
            
            #line 92 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n      return this.httpClient.");
            
            #line 94 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(httpMethod));
            
            #line default
            #line hidden
            this.Write("<");
            
            #line 94 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Generator.GetResponseType(operation, this.ModelsModuleName)));
            
            #line default
            #line hidden
            this.Write(">(url");
            
            #line 94 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(queryStringParams.Any() ? ", { params }" : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n      ");
            
            #line 95 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n  }\r\n  ");
            
            #line 98 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 99 "C:\git-temp\tangsem-suite\tests\server\GeneratorTest\GeneratorTest.Host\Infrastructure\ApiClientTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"

  
  protected url(relativeUrl: string): string {
      return this.apiUrlBase + relativeUrl;
  }
  
  protected setParamValue(httpParams: HttpParams, key: string, val: any): HttpParams {
      
      if (Array.isArray(val)) {
          return (val as any[]).reduce((hp, iterVal) => {
            this.setParamValue(httpParams, key, iterVal);
          }, httpParams);
      }
      
      return httpParams.append(key,  this.convertToParamValString(val));
  }

  protected convertToParamValString(val: any): string {
      if (val instanceof Date) {
        return (val as Date).toISOString();
      }

      return `${val}`;
  }

  protected getHttpParams(qryParams: any) {
      
    const params = Object.keys(qryParams || {}).reduce((p, key) => {
        if (qryParams[key] !== undefined) {
          return this.setParamValue(p, key, qryParams[key]);
        }

        return p;
      }, new HttpParams());

    return params;
  }

}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ApiClientTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
